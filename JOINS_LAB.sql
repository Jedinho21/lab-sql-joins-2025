USE SAKILA;
-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1.List the number of films per category.
SELECT name AS category_name,COUNT(*) AS number_of_films
FROM category AS cat
JOIN film_category AS f
ON cat.category_id=f.category_id
GROUP BY name
ORDER BY number_of_films DESC;

-- 2.Retrieve the store ID, city, and country for each store.
SELECT S.STORE_ID,C.CITY,CO.COUNTRY
FROM STORE AS S
JOIN ADDRESS AS A
ON S.ADDRESS_ID=A.ADDRESS_ID
JOIN CITY AS C
ON A.CITY_ID=C.CITY_ID
JOIN COUNTRY AS CO
ON C.COUNTRY_ID=Co.COUNTRY_ID;

-- 3.Calculate the total revenue generated by each store in dollars.
SELECT S.STORE_ID,SUM(P.AMOUNT) AS TOTAL_REVENUE
FROM store AS s
JOIN staff AS st
ON s.store_id=st.store_id
JOIN payment AS p
ON st.staff_id=p.staff_id
GROUP BY s.store_id;

-- 4.Determine the average running time of films for each category.

SELECT c.name, ROUND(AVG(Fil.LENGTH),2) AS average_time
FROM category AS c
JOIN film_category AS F
ON c.category_id=f.category_id
JOIN film AS fil
ON f.film_id=fil.film_id
GROUP BY c.name;

-- BONUS
-- 5.Identify the film categories with the longest average running time.
SELECT c.name, ROUND(AVG(Fil.LENGTH),2) AS average_time
FROM category AS c
JOIN film_category AS F
ON c.category_id=f.category_id
JOIN film AS fil
ON f.film_id=fil.film_id
GROUP BY c.name
ORDER BY average_time DESC;

-- 6.Display the top 10 most frequently rented movies in descending order.
SELECT F.TITLE, COUNT(R.RENTAL_ID) AS R
FROM RENTAL AS R 
JOIN INVENTORY AS I
ON R.INVENTORY_ID=I.INVENTORY_ID
JOIN FILM AS F
ON I.FILM_ID=F.FILM_ID
GROUP BY F.TITLE
ORDER BY R DESC
LIMIT 10;

-- 7.Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT F.FILM_ID,F.TITLE,S.STORE_ID,I.INVENTORY_ID
FROM INVENTORY AS I
JOIN STORE AS S USING (STORE_ID)
JOIN FILM AS F USING(FILM_ID)
WHERE F.TITLE="Academy Dinosaur" AND S.STORE_ID =1;

-- 8.Provide a list of all distinct film titles, along with their availability status in the inventory.
-- Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory,
-- and this information can be obtained using a CASE statement combined with IFNULL."


SELECT DISTINCT(F.TITLE),COUNT(i.film_id) AS ‘Number_of_Copies’,
     CASE
         WHEN ISNULL(I.film_ID) THEN 'NOT AVAILABLE'
         ELSE 'Available'
	END AS 'Rental available'
     
FROM FILM AS F
LEFT JOIN INVENTORY AS I USING(FILM_ID)
GROUP BY f.film_id;
